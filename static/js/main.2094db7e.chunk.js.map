{"version":3,"sources":["utils/API.js","utils/EmployeeDataContext.js","components/DataTable/index.js","pages/Main.js","components/Header/index.js","components/Footer/index.js","App.js","serviceWorker.js","index.js"],"names":["axios","get","EmployeeDataContext","React","createContext","DataTable","filteredEmployees","useContext","sortData","searchName","Container","type","placeholder","onChange","event","className","Table","striped","bordered","hover","variant","Button","onClick","map","login","picture","name","location","email","phone","src","large","alt","first","last","state","country","uuid","Main","useState","employeeList","setEmployeeList","setFilteredEmployees","useEffect","API","then","res","data","results","Provider","value","filterName","target","filteredList","filter","toLowerCase","indexOf","column","sort","a","b","Header","Jumbotron","Footer","App","Boolean","window","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.2094db7e.chunk.js","sourcesContent":["import axios from 'axios';\n\n// Export an object containing a method used to access the randomuser API\nexport default {\n    getEmployees: () => {\n        return axios.get('https://randomuser.me/api/?results=100');\n    }\n};","import React from 'react';\n\nconst EmployeeDataContext = React.createContext();\n\nexport default EmployeeDataContext;","import React, { useContext } from \"react\";\nimport EmployeeDataContext from \"../../utils/EmployeeDataContext\";\nimport './style.css';\nimport { Container, Table, Button } from 'react-bootstrap';\n\n\nfunction DataTable() {\n  const { filteredEmployees } = useContext(EmployeeDataContext);\n  const { sortData, searchName } = useContext(EmployeeDataContext);\n\n  return (\n    <Container >\n      <div>\n        {/* employee search/filter */}\n        <input type=\"text\" placeholder=\"Enter a name\" onChange={(event) => searchName(event)} />\n        <p className='text-center mt-2'>\n          Enter name to filter the results\n        </p>\n      </div>\n\n      <Table striped bordered hover variant=\"dark\">\n        {/* employee data sort buttons */}\n        <thead>\n          <tr>\n            <td>\n              <p className='p-2 m-2 font-weight-bold'>Picture</p>\n            </td>\n            <td>\n              <Button\n                variant='outline-primary'\n                className=\"mt-2\"\n                onClick={() => sortData(\"name\")}>Name\n              </Button>\n            </td>\n            <td>\n              <Button\n                variant='outline-primary'\n                className=\"mt-2\"\n                onClick={() => sortData(\"location\")}>Location\n                </Button>\n            </td>\n            <td>\n              <Button\n                variant='outline-primary'\n                className=\"mt-2\"\n                onClick={() => sortData(\"email\")}>Email\n                </Button>\n            </td>\n            <td>\n              <p className='p-2 m-2 font-weight-bold'>Phone</p>\n            </td>\n          </tr>\n        </thead>\n\n        {/* employee data table */}\n        <tbody>\n          {filteredEmployees.map(({ login, picture, name, location, email, phone }) => {\n            return (\n              <tr key={login.uuid}>\n                <td>\n                  <img\n                    src={picture.large}\n                    alt={name.first + \" \" + name.last}\n                  />\n                </td>\n                <td>{name.first + \" \" + name.last}</td>\n                <td>{`${location.state}, ${location.country}`}</td>\n                <td>{email}</td>\n                <td>{phone}</td>\n              </tr>\n            );\n          })}\n        </tbody>\n      </Table>\n    </Container>\n  );\n}\nexport default DataTable;\n","import React, { useEffect, useState } from \"react\";\nimport API from \"../utils/API\";\nimport EmployeeDataContext from \"../utils/EmployeeDataContext\";\nimport DataTable from \"../components/DataTable\";\n\nfunction Main() {\n\n  const [employeeList, setEmployeeList] = useState([]);\n  const [filteredEmployees, setFilteredEmployees] = useState([]);\n\n  // Get API data\n  useEffect(() => {\n    API.getEmployees().then((res) => {\n      setEmployeeList(res.data.results);\n      setFilteredEmployees(res.data.results);\n    });\n  }, []);\n\n  // Search/filter employees by name\n  const searchName = (event) => {\n    const filterName = event.target.value;\n\n    const filteredList = employeeList.filter(({ name }) => {\n      let results = name.first.toLowerCase() + \" \" + name.last.toLowerCase();\n      if (results.indexOf(filterName.toLowerCase()) !== -1) {\n        return name;\n      }\n    });\n    setFilteredEmployees([...filteredList]);\n  };\n\n  // Sort employee data by name, location, or email\n  const sortData = (column) => {\n    switch (column) {\n      case \"name\":\n        employeeList.sort((a, b) => {\n          if (a.name.last.toLowerCase() < b.name.last.toLowerCase()) {\n            return -1;\n          } else {\n            return 1;\n          }\n        });\n        setFilteredEmployees([...employeeList]);\n        break;\n\n      case \"location\":\n        employeeList.sort((a, b) => {\n          if (\n            a.location.state.toLowerCase() < b.location.state.toLowerCase()\n          ) {\n            return -1;\n          } else {\n            return 1;\n          }\n        });\n        setFilteredEmployees([...employeeList]);\n        break;\n\n      case \"email\":\n        employeeList.sort((a, b) => {\n          if (a.email.toLowerCase() < b.email.toLowerCase()) {\n            return -1;\n          } else {\n            return 1;\n          }\n        });\n        setFilteredEmployees([...employeeList]);\n        break;\n        \n      default:\n        break;\n    }\n  };\n\n  return (\n    <EmployeeDataContext.Provider\n      value={{ employeeList, filteredEmployees, searchName, sortData }}\n    >\n      <DataTable />\n    </EmployeeDataContext.Provider>\n  );\n}\n\nexport default Main;","import React from 'react';\nimport { Jumbotron } from 'react-bootstrap';\nimport './style.css';\n\nfunction Header() {\n    return (\n        <Jumbotron className='bg-primary'>\n            <h1 className='font-weight-bold'>Employee Directory</h1>\n            <p>Sort the data by clicking the buttons above each column or entering letters into the search box</p>\n        </Jumbotron>\n    )\n}\n\nexport default Header;","import React from \"react\";\n\nfunction Footer() {\n  return (\n    <footer className=\"footer\">\n      <p>Jordan Stuckman - Employee Directory - 2021</p>\n    </footer>\n  );\n}\n\nexport default Footer;","import React from 'react';\nimport Main from './pages/Main';\nimport './App.css';\nimport Header from './components/Header'\nimport Footer from './components/Footer';\nimport 'bootstrap/dist/css/bootstrap.min.css';\n\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <Header />\n      <Main />\n      <Footer />\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}